#debug: true
spring:
#  datasource:
#    driver-class-name: com.mysql.cj.jdbc.Driver
#    name: druid
#    password: root
#    type: com.alibaba.druid.pool.DruidDataSource
#    url: jdbc:mysql://127.0.0.1:3306/apocalypse_example?useUnicode=true&characterEncoding=utf8&allowMultiQueries=true&useSSL=false&serverTimezone=Asia/Shanghai
#    username: root
  redis:
    database: 0
    host: localhost
    port: 6379
    timeout: 10000ms
  cloud:
    inetutils:
      ignored-interfaces: #忽略docker0网卡以及 veth开头的网卡
        - docker0
        - veth.*
    sentinel:
      transport:
        dashboard: localhost:8080
        port: 8719
      log:
        switch-pid: true
    consul:
      enabled: true
      host: 127.0.0.1
      port: 8500
      discovery:
        enabled: true
        prefer-ip-address: true
        tags:
          - java
          - service
        health-check-path: ${server.servlet.context-path}/actuator/health
        instance-id: instance-${spring.cloud.client.ip-address}-${spring.application.name}-${server.port}
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest
    listener:
      simple:
        # 手动ACK 不开启自动ACK模式，目的是防止报错后未正确处理消息丢失，默认 为 none
        acknowledge-mode: manual
    virtual-host: apocalypse
  cache:
    type: redis
    redis:
      time-to-live: 300000ms

  shardingsphere:
    datasource:
      ds0:
        driver-class-name: com.mysql.cj.jdbc.Driver
        password: root
        type: com.alibaba.druid.pool.DruidDataSource
        url: jdbc:mysql://127.0.0.1:3306/apocalypse_example?useUnicode=true&characterEncoding=utf8&allowMultiQueries=true&useSSL=false&serverTimezone=Asia/Shanghai
        username: root
      ds1:
        driver-class-name: com.mysql.cj.jdbc.Driver
        password: root
        type: com.alibaba.druid.pool.DruidDataSource
        url: jdbc:mysql://127.0.0.1:3306/apocalypse_example1?useUnicode=true&characterEncoding=utf8&allowMultiQueries=true&useSSL=false&serverTimezone=Asia/Shanghai
        username: root
      names: ds0,ds1
    sharding:
      tables:
        # 分表
        sharding_table:
          actual-data-nodes: ds0.sharding_table_$->{0..4}
          table-strategy:
            inline:
              algorithm-expression: sharding_table_$->{id % 5}
              sharding-column: id
        # 分库分表
        sharding_database_table:
          actual-data-nodes: ds$->{0..1}.sharding_database_table_$->{0..4}
          database-strategy:
            inline:
              sharding-column: id
              algorithm-expression: ds$->{id % 2}
          table-strategy:
            inline:
              algorithm-expression: sharding_database_table_$->{id % 5}
              sharding-column: id
        # 分库分表，按月分表
        sharding_year_month:
          actual-data-nodes: ds$->{0..1}.sharding_year_month_$->{2019..2019}_0$->{1..9},ds$->{0..1}.sharding_year_month_$->{2019..2019}_$->{10..12}
          database-strategy:
            inline:
              sharding-column: id
              algorithm-expression: ds$->{id % 2}
          table-strategy:
            standard:
              sharding-column: order_date
              precise-algorithm-class-name: com.apocalypse.example.sharding.YearMonthPreciseShardingAlgorithm
              range-algorithm-class-name: com.apocalypse.example.sharding.YearMonthRangeShardingAlgorithm
      default-data-source-name: ds0
    props:
      sql:
        show: false
